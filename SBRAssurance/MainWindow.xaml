<Window x:Class="SBRAssurance.MainWindow"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
		xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:local="clr-namespace:SBRAssurance"
		mc:Ignorable="d"
		AllowDrop="True" Drop="Window_Drop"
		Title="SBR Assurance" Height="600" Width="1000">

	<Window.Resources>
		<Style x:Key="removeButtonStyle" TargetType="{x:Type Button}">
			<Setter Property="Focusable" Value="False" />
			<Setter Property="OverridesDefaultStyle" Value="True" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">
						<Border x:Name="border" CornerRadius="1" BorderThickness="0" Background="Transparent" ToolTip="Remove">
							<Path x:Name="path" Data="M0,0 L10,10 M0,10 L10,0" Stroke="DarkGray" StrokeThickness="2" StrokeStartLineCap="Round" StrokeEndLineCap="Round" Margin="2,1" />
						</Border>
						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter TargetName="path" Property="Stroke" Value="DarkRed" />
							</Trigger>
							<Trigger Property="IsPressed" Value="True">
								<Setter TargetName="path" Property="Margin" Value="3,2,1,0" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style x:Key="idComboStyle" TargetType="{x:Type ComboBox}">
			<Style.Resources>
				<Style TargetType="ComboBoxItem">
					<Setter Property="HorizontalContentAlignment" Value="Stretch" />
				</Style>
				<Style TargetType="ToolTip">
					<Style.Resources>
						<Style TargetType="ContentPresenter">
							<Style.Resources>
								<Style TargetType="TextBlock">
									<Setter Property="TextWrapping" Value="Wrap" />
								</Style>
							</Style.Resources>
						</Style>
					</Style.Resources>
					<Setter Property="MaxWidth" Value="500" />
				</Style>
			</Style.Resources>
			<Setter Property="ToolTip" Value="{Binding Path=SelectedItem.Description, RelativeSource={RelativeSource Self}}" />
			<Setter Property="ToolTipService.ShowDuration" Value="20000" />
			<Setter Property="ItemTemplate">
				<Setter.Value>
					<DataTemplate>
						<TextBlock Text="{Binding Path=Id}" ToolTip="{Binding Path=Description}" ToolTipService.ShowDuration="20000" />
					</DataTemplate>
				</Setter.Value>
			</Setter>
		</Style>

		<Style x:Key="checkValid" TargetType="{x:Type CheckBox}">
			<Setter Property="Focusable" Value="False" />
			<Setter Property="OverridesDefaultStyle" Value="True" />
			<Setter Property="IsEnabled" Value="False" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type CheckBox}">
						<BulletDecorator>
							<BulletDecorator.Bullet>
								<Path x:Name="path" StrokeThickness="2" StrokeStartLineCap="Round" StrokeEndLineCap="Round" Margin="2,1" />
							</BulletDecorator.Bullet>
							<ContentPresenter Margin="10,0,0,0" VerticalAlignment="Center" />
						</BulletDecorator>
						<ControlTemplate.Triggers>
							<Trigger Property="IsChecked" Value="True">
								<Setter TargetName="path" Property="Data" Value="M0,6 L3,10 L10,0" />
								<Setter TargetName="path" Property="Stroke" Value="Green" />
							</Trigger>
							<Trigger Property="IsChecked" Value="False">
								<Setter TargetName="path" Property="Data" Value="M0,0 L10,10 M0,10 L10,0" />
								<Setter TargetName="path" Property="Stroke" Value="Red" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
	</Window.Resources>
	
	<Grid>
		<Grid.RowDefinitions>
			<RowDefinition Height="*" />
			<RowDefinition Height="Auto" />
		</Grid.RowDefinitions>
		<ListView Margin="10" ItemsSource="{Binding Path=Files}">
			<ListView.Resources>
				<Style TargetType="ListViewItem">
					<Setter Property="HorizontalContentAlignment" Value="Stretch" />
				</Style>
			</ListView.Resources>
			<ListView.View>
				<GridView>
					<GridViewColumn Header="" Width="30">
						<GridViewColumn.CellTemplate>
							<DataTemplate>
								<CheckBox IsChecked="{Binding Path=IsValid}" Margin="0,2,0,0" Style="{StaticResource checkValid}" Visibility="{Binding CheckItemVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}" />
							</DataTemplate>
						</GridViewColumn.CellTemplate>
					</GridViewColumn>
					<GridViewColumn Header="File name" Width="250">
						<GridViewColumn.CellTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding Path=Name}" ToolTip="{Binding Path=Uri}" />
							</DataTemplate>
						</GridViewColumn.CellTemplate>
					</GridViewColumn>
					<GridViewColumn Header="Type" DisplayMemberBinding="{Binding Path=TypeStr}" Width="100" />
					<GridViewColumn Header="Commitment type" Width="350">
						<GridViewColumn.CellTemplate>
							<DataTemplate>
								<Grid>
									<ComboBox ItemsSource="{Binding Path=SelectedPolicy.CommitmentTypes, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}" SelectedItem="{Binding Path=CommitmentType}" Style="{StaticResource idComboStyle}" SelectionChanged="CommitmentType_SelectionChanged" Visibility="{Binding SignItemVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}" />
									<TextBlock Text="{Binding Path=CommitmentTypeId}" Margin="0,3" Visibility="{Binding CheckItemVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}" />
								</Grid>
							</DataTemplate>
						</GridViewColumn.CellTemplate>
					</GridViewColumn>
					<GridViewColumn Header="Transform" Width="170">
						<GridViewColumn.CellTemplate>
							<DataTemplate>
								<ComboBox ItemsSource="{Binding Path=Settings.TransformSets, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}" SelectedItem="{Binding Path=TransformSet}" DisplayMemberPath="Name" Visibility="{Binding SignItemVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:MainWindow}}}" />
							</DataTemplate>
						</GridViewColumn.CellTemplate>
					</GridViewColumn>
					<GridViewColumn Header="" Width="28">
						<GridViewColumn.CellTemplate>
							<DataTemplate>
								<Button Style="{StaticResource removeButtonStyle}" Margin="0,2,0,0" Click="RemoveItem_Click" />
							</DataTemplate>
						</GridViewColumn.CellTemplate>
					</GridViewColumn>
				</GridView>
			</ListView.View>
		</ListView>
		<Grid Grid.Row="1">
			<Grid.ColumnDefinitions>
				<ColumnDefinition Width="Auto" />
				<ColumnDefinition Width="Auto" />
				<ColumnDefinition Width="*" />
			</Grid.ColumnDefinitions>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto" />
				<RowDefinition Height="Auto" />
				<RowDefinition Height="Auto" />
				<RowDefinition Height="Auto" />
			</Grid.RowDefinitions>
			<TextBlock Margin="10,13" Text="Signing policy" />
			<TextBlock Grid.Row="1" Margin="10,13,10,29" Text="Certificate" />
			<Button Grid.Column="2" Width="80" Height="25" Content="Add files..." Margin="10,8" HorizontalAlignment="Right" Click="AddFiles_Click" />
			<!-- second column when in signing mode -->
			<ComboBox Grid.Column="1" ItemsSource="{Binding Path=Policies}" SelectedItem="{Binding Path=SelectedPolicy}" Width="300" Margin="10" Style="{StaticResource idComboStyle}" Visibility="{Binding Path=SignItemVisibility}" />
			<ComboBox Grid.Row="1" Grid.Column="1" ItemsSource="{Binding Path=CertificateList}" SelectedItem="{Binding Path=SelectedCertificate}" Width="300" Height="38" Margin="10" Visibility="{Binding Path=SignItemVisibility}">
				<ComboBox.ItemTemplate>
					<DataTemplate>
						<StackPanel Orientation="Vertical">
							<StackPanel Orientation="Horizontal">
								<TextBlock Text="{Binding Path=FriendlyName, StringFormat={}\'{0}\'}" />
								<TextBlock Text="{Binding Path=Subject, StringFormat={}; {0}}" />
							</StackPanel>
							<TextBlock Text="{Binding Path=Issuer, StringFormat={}Issued by: {0}}" Foreground="Gray" />
						</StackPanel>
					</DataTemplate>
				</ComboBox.ItemTemplate>
			</ComboBox>
			<CheckBox Grid.Row="2" Grid.Column="1" Margin="10" IsChecked="{Binding Path=SaveAsZip}" Visibility="{Binding Path=SignItemVisibility}">Save all in zip file</CheckBox>
			<!-- second column when in checking mode -->
			<CheckBox Grid.Column="1" IsChecked="{Binding Path=SignPolicyIsValid}" Content="{Binding Path=SignPolicy}" Style="{StaticResource checkValid}" Margin="10,13" Visibility="{Binding Path=CheckItemVisibility}" />
			<StackPanel Grid.Row="1" Grid.Column="1" Orientation="Vertical" Margin="10,11" Visibility="{Binding Path=CheckItemVisibility}">
				<CheckBox IsChecked="{Binding Path=SignCertIsValid, Mode=OneWay}" Style="{StaticResource checkValid}" Margin="0,1">
					<StackPanel Orientation="Horizontal">
						<TextBlock Text="{Binding Path=SignCert.FriendlyName, StringFormat={}\'{0}\'}" />
						<TextBlock Text="{Binding Path=SignCert.Subject, StringFormat={}; {0}}" />
					</StackPanel>
				</CheckBox>
				<StackPanel Orientation="Horizontal" Margin="21,1,0,1">
					<TextBlock Text="{Binding Path=SignCACert.FriendlyName, StringFormat={}CA: \'{0}\'}" />
					<TextBlock Text="{Binding Path=SignCACert.Subject, StringFormat={}; {0}}" />
				</StackPanel>
				<TextBlock Text="{Binding Path=SignCertError}" FontWeight="DemiBold" Foreground="Red" Margin="21,1,0,1">
					<TextBlock.Style>
						<Style TargetType="TextBlock">
							<Style.Triggers>
								<Trigger Property="Text" Value="">
									<Setter Property="Visibility" Value="Collapsed" />
								</Trigger>
							</Style.Triggers>
						</Style>
					</TextBlock.Style>
				</TextBlock>
			</StackPanel>
			<CheckBox Grid.Row="2" Grid.Column="1" Margin="10,9,10,10" IsChecked="{Binding Path=SignatureIsValid}" Visibility="{Binding Path=CheckItemVisibility}" FontWeight="DemiBold">
				<CheckBox.Style>
					<Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource checkValid}">
						<Style.Triggers>
							<Trigger Property="IsChecked" Value="True">
								<Setter Property="Content" Value="This signature is valid" />
							</Trigger>
							<Trigger Property="IsChecked" Value="False">
								<Setter Property="Content" Value="This signature is not valid" />
							</Trigger>
						</Style.Triggers>
					</Style>
				</CheckBox.Style>
			</CheckBox>
			<!-- -->
			<Button Grid.Row="3" Grid.Column="1" Width="120" Height="25" Content="Create signature" Margin="10" HorizontalAlignment="Left" Click="Sign_Click" IsEnabled="{Binding Path=SignEnable}" />
			<Button Grid.Row="3" Grid.Column="2" Width="80" Height="25" Content="About..." Margin="10" HorizontalAlignment="Right" Click="About_Click" />
		</Grid>
	</Grid>
</Window>
